import { useState } from "react";
import { Download, FileText } from "lucide-react";
import { Button } from "@/components/ui/button";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";

interface ExportToPDFProps {
  gpa?: number;
  cgpa?: number;
  totalCredits?: number;
  semesterData?: any[];
  studentName?: string;
}

export function ExportToPDF({ gpa, cgpa, totalCredits, semesterData, studentName = "Student" }: ExportToPDFProps) {
  const [isExporting, setIsExporting] = useState(false);

  const generatePDF = async () => {
    setIsExporting(true);
    
    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      
      // Header
      pdf.setFillColor(33, 150, 243); // Primary color
      pdf.rect(0, 0, pageWidth, 40, 'F');
      
      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(24);
      pdf.setFont("helvetica", "bold");
      pdf.text("GPA Report", pageWidth / 2, 25, { align: 'center' });
      
      // Student info
      pdf.setTextColor(0, 0, 0);
      pdf.setFontSize(14);
      pdf.text(`Student: ${studentName}`, 20, 60);
      pdf.text(`Report Generated: ${new Date().toLocaleDateString()}`, 20, 75);
      
      let yPosition = 100;
      
      // GPA Summary
      if (gpa || cgpa) {
        pdf.setFontSize(16);
        pdf.setFont("helvetica", "bold");
        pdf.text("Academic Summary", 20, yPosition);
        yPosition += 20;
        
        pdf.setFontSize(12);
        pdf.setFont("helvetica", "normal");
        
        if (gpa) {
          pdf.text(`Current Semester GPA: ${gpa.toFixed(2)}/4.00`, 30, yPosition);
          yPosition += 15;
        }
        
        if (cgpa) {
          pdf.text(`Cumulative GPA (CGPA): ${cgpa.toFixed(2)}/4.00`, 30, yPosition);
          yPosition += 15;
        }
        
        if (totalCredits) {
          pdf.text(`Total Credit Hours: ${totalCredits}`, 30, yPosition);
          yPosition += 15;
        }
        
        // Academic Standing
        const currentGPA = cgpa || gpa || 0;
        let standing = "Fail";
        if (currentGPA >= 3.67) standing = "Excellent";
        else if (currentGPA >= 3.00) standing = "Good";
        else if (currentGPA >= 2.00) standing = "Satisfactory";
        else if (currentGPA >= 1.00) standing = "Poor but Passing";
        
        pdf.text(`Academic Standing: ${standing}`, 30, yPosition);
        yPosition += 30;
      }
      
      // Grading Scale
      pdf.setFontSize(16);
      pdf.setFont("helvetica", "bold");
      pdf.text("Grading Scale", 20, yPosition);
      yPosition += 20;
      
      const gradingScale = [
        "86-100% → A → 4.00 (Excellent)",
        "82-85% → A- → 3.67",
        "78-81% → B+ → 3.33 (Good)",
        "74-77% → B → 3.00",
        "70-73% → B- → 2.67",
        "66-69% → C+ → 2.33 (Satisfactory)",
        "62-65% → C → 2.00",
        "58-61% → C- → 1.67",
        "54-57% → D+ → 1.33 (Poor but passing)",
        "50-53% → D → 1.00",
        "Below 50% → F → 0.00 (Fail)"
      ];
      
      pdf.setFontSize(10);
      pdf.setFont("helvetica", "normal");
      
      gradingScale.forEach((scale, index) => {
        if (yPosition > pageHeight - 30) {
          pdf.addPage();
          yPosition = 30;
        }
        pdf.text(scale, 30, yPosition);
        yPosition += 12;
      });
      
      // Footer
      pdf.setFontSize(8);
      pdf.setTextColor(128, 128, 128);
      pdf.text("Generated by GPA Calculator - Made by Saeed Ur Rehman (BCS233057)", pageWidth / 2, pageHeight - 10, { align: 'center' });
      
      // Save the PDF
      pdf.save(`GPA_Report_${new Date().toISOString().split('T')[0]}.pdf`);
      
    } catch (error) {
      console.error("Error generating PDF:", error);
      alert("Error generating PDF. Please try again.");
    } finally {
      setIsExporting(false);
    }
  };

  if (!gpa && !cgpa) {
    return null;
  }

  return (
    <Button
      onClick={generatePDF}
      disabled={isExporting}
      className="bg-gradient-accent hover:bg-gradient-accent/90 text-accent-foreground shadow-medium hover:shadow-glow transition-all duration-300"
    >
      {isExporting ? (
        <>
          <FileText className="h-4 w-4 mr-2 animate-pulse" />
          Generating...
        </>
      ) : (
        <>
          <Download className="h-4 w-4 mr-2" />
          Export to PDF
        </>
      )}
    </Button>
  );
}